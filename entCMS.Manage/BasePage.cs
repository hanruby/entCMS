using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using Wuqi.Webdiyer;
using entCMS.Common;
using System.Web.UI.WebControls;
using System.Data;
using entCMS.Models;
using entCMS.Services;

namespace entCMS.Manage
{
    /// <summary>
    /// BasePage 的摘要说明
    /// </summary>
    public class BasePage : System.Web.UI.Page
    {
        /// <summary>
        /// 页面验证类型
        /// </summary>
        public enum PagePurviewType
        {
            PPT_UNKNOWN = 0,
            PPT_NEWS,
            PPT_SYSTEM
        }

        protected Control m_dataCtrl = null;
        protected AspNetPager m_pager = null;
        protected Type m_ctrlType = null;

        private string _nodeCode = "";
        public string NodeCode
        {
            get
            {
                if (!string.IsNullOrEmpty(Request["node"]))
                    _nodeCode = Request["node"];
                else
                    _nodeCode = "0000";
                return _nodeCode;
            }
        }

        private PagePurviewType _purviewType = PagePurviewType.PPT_UNKNOWN;
        protected PagePurviewType PurviewType
        {
            get { return _purviewType; }
            set { _purviewType = value; }
        }

        private cmsUser user = null;
        /// <summary>
        /// 当前登录的用户对象
        /// </summary>
        public cmsUser LoginUser
        {
            get
            {
                if (user == null)
                {
                    if (User != null && User.Identity.IsAuthenticated)
                    {
                        string uname = User.Identity.Name;
                        user = UserService.GetInstance().GetByUid(uname);
                    }
                }
                return user;
            }
            set { user = value; }
        }

        private long currentLanguageId = 0;
        /// <summary>
        /// 当前语言Id
        /// </summary>
        public long CurrentLanguageId
        {
            get
            {
                //if (Session["__language__"] != null)
                //{
                //    currentLanguage = Convert.ToInt64(Session["__language__"]);
                //}
                if (!string.IsNullOrEmpty(CookieHelper.GetCookieValue("__language__")))
                {
                    currentLanguageId = Convert.ToInt64(CookieHelper.GetCookieValue("__language__"));
                }
                return currentLanguageId;
            }
            set { currentLanguageId = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public BasePage()
        {
        }

        public BasePage(PagePurviewType ppt)
        {
            _purviewType = ppt;
        }
        /// <summary>
        /// override OnInit,initialize Session
        /// </summary>
        /// <param name="e"></param>
        protected override void OnInit(EventArgs e)
        {
            if (User == null || !User.Identity.IsAuthenticated)
            {
                throw new OutOfLoginException("您未登录或登录超时！");
            }

            if (!ValidUserPurview())
            {
                throw new InvalidPurviewException("对不起，您没有访问这个页面的权限！");
            }

            base.OnInit(e);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            this.Title = ConfigHelper.GetVal("SysTitle");
        }

        protected override void OnError(EventArgs e)
        {
            // Get last error from the server
            Exception exc = Server.GetLastError();

            // 处理登录信息丢失的错误
            if (exc is OutOfLoginException)
            {
                // Give the user some information, but
                // stay on the default page
                //Response.Write("<h2>Default Page Error</h2>\n");
                //Response.Write("<p>Provide as much information here as is " +
                //  "appropriate to show to the client.</p>\n");
                //Response.Write("Return to the <a href='Default.aspx'>" +
                //    "Default Page</a>\n");

                // Log the exception and notify system operators
                //ExceptionUtility.LogException(exc, "DefaultPage");
                //ExceptionUtility.NotifySystemOps(exc);

                // Clear the error from the server
                //Server.ClearError();

                //Server.Execute("/Manage/Logout.aspx", true);
                Response.Redirect("~/Manage/Logout.aspx", true);
            }

            // Handle exceptions generated by Button 1
            else if (exc is InvalidPurviewException)
            {
                // Pass the error on to the Generic Error page
                //Server.Transfer("GenericErrorPage.aspx", true);

                //Response.Write("<h2>访问受限</h2>\n");
                //Response.Write("<p>" + exc.Message + "</p>\n");
                //Response.Write("退回到<a href='javascript:void(0);' onclick='history.go(-1);'>上一页</a>或者跳转到<a href='javascript:void(0);' onclick='top.location.replace(\"/manage/\");'>首页</a>\n");

                Response.ContentEncoding = System.Text.Encoding.UTF8;
                WritePageInfo("访问受限", "退回到<a href='javascript:void(0);' onclick='history.go(-1);'>上一页</a>或者<a href='javascript:void(0);' onclick='top.location.replace(\"" + GetClientUrl("~/manage/login.aspx") + "\");'>重新登录</a>", false);

                // Clear the error from the server
                Server.ClearError();
            }

            else
            {
                // Pass the error on to the default global handler
            }

            base.OnError(e);
        }

        #region 页面生成相关
        protected virtual int PageIndex
        {
            get
            {
                if ((this.m_pager == null) && string.IsNullOrEmpty(base.Request.QueryString["page"]))
                {
                    return 1;
                }
                if ((base.Request.QueryString["page"] == null) || (base.Request.QueryString["page"].Trim() == ""))
                {
                    return this.m_pager.CurrentPageIndex;
                }
                return ParameterFilter.GetInt(base.Request.QueryString["page"], 1);
            }
            set
            {
                this.m_pager.CurrentPageIndex = value;
            }
        }

        protected virtual int PageSize
        {
            get
            {
                if (this.m_pager == null)
                    return 10;
                return this.m_pager.PageSize;
            }
            set
            {
                this.m_pager.PageSize = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="pager"></param>
        /// <param name="dataControl"></param>
        protected void InitializePageControls(AspNetPager pager, Control dataControl)
        {
            this.m_dataCtrl = dataControl;
            this.m_pager = pager;
            this.m_ctrlType = dataControl.GetType();

            if (this.m_dataCtrl != null)
            {
                if (this.m_ctrlType.ToString().Equals("System.Web.UI.WebControls.GridView"))
                {
                    GridView gv = this.m_dataCtrl as GridView;
                    if (gv != null)
                    {
                        gv.EmptyDataText = "<div class='nodata'>没有可以显示的内容</div>";
                    }
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="recordCount"></param>
        /// <param name="pager"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageIndex"></param>
        public static void PaginationInfo(int recordCount, AspNetPager pager, int pageSize, int pageIndex)
        {
            pager.RecordCount = recordCount;
            pager.AlwaysShow = true;
            pager.PageSize = pageSize;
            pager.PageIndexBoxType = PageIndexBoxType.DropDownList;
            pager.ShowBoxThreshold = 5;
            pager.CurrentPageIndex = pageIndex;
            pager.HorizontalAlign = HorizontalAlign.Right;
            //pager.UrlPaging = true;
            pager.ShowCustomInfoSection = ShowCustomInfoSection.Left;
            pager.CustomInfoTextAlign = HorizontalAlign.Left;
            pager.CustomInfoSectionWidth = Unit.Pixel(250);
            pager.CustomInfoHTML = "当前第<b>%CurrentPageIndex%</b>/<b>%PageCount%</b>页 共<b>%RecordCount%</b>条记录 每页<b>%PageSize%</b>条&nbsp;";
            pager.FirstPageText = "首页";
            pager.LastPageText = "末页";
            pager.NextPageText = "下页";
            pager.PrevPageText = "上页";
            pager.CssClass = "PagingClass";
            pager.CurrentPageButtonClass = "CurrentPagingClass";
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="recordCount"></param>
        private void PaginationInfo(int recordCount)
        {
            PaginationInfo(recordCount, this.m_pager, PageSize, PageIndex);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dt"></param>
        protected virtual void BindGrid(DataTable dt)
        {
            (this.m_dataCtrl as GridView).DataSource = (dt == null) ? null : dt.DefaultView;
            (this.m_dataCtrl as GridView).DataBind();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="recordCount"></param>
        /// <param name="dt"></param>
        protected virtual void BindGrid(int recordCount, DataTable dt)
        {
            (this.m_dataCtrl as GridView).DataSource = (dt == null) ? null : dt.DefaultView;
            (this.m_dataCtrl as GridView).DataBind();
            this.PaginationInfo(recordCount);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="recordCount"></param>
        /// <param name="list"></param>
        protected virtual void BindGrid<T>(IList<T> list)
        {
            (this.m_dataCtrl as GridView).DataSource = list;
            (this.m_dataCtrl as GridView).DataBind();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="recordCount"></param>
        /// <param name="list"></param>
        protected virtual void BindGrid<T>(int recordCount, IList<T> list)
        {
            (this.m_dataCtrl as GridView).DataSource = list;
            (this.m_dataCtrl as GridView).DataBind();
            this.PaginationInfo(recordCount);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dt"></param>
        protected virtual void BindRepeater(DataTable dt)
        {
            (this.m_dataCtrl as Repeater).DataSource = (dt == null) ? null : dt.DefaultView;
            (this.m_dataCtrl as Repeater).DataBind();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="recordCount"></param>
        /// <param name="dt"></param>
        protected virtual void BindRepeater(int recordCount, DataTable dt)
        {
            (this.m_dataCtrl as Repeater).DataSource = (dt == null) ? null : dt.DefaultView;
            (this.m_dataCtrl as Repeater).DataBind();
            this.PaginationInfo(recordCount);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="recordCount"></param>
        /// <param name="list"></param>
        protected virtual void BindRepeater<T>(int recordCount, IList<T> list)
        {
            (this.m_dataCtrl as Repeater).DataSource = list;
            (this.m_dataCtrl as Repeater).DataBind();
            this.PaginationInfo(recordCount);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="writer"></param>
        protected override void Render(HtmlTextWriter writer)
        {
            if (this.m_dataCtrl != null)
            {
                if (this.m_dataCtrl.GetType().ToString().Equals("System.Web.UI.WebControls.GridView"))
                {
                    GridView gv = this.m_dataCtrl as GridView;
                    if (gv != null)
                    {
                        foreach (GridViewRow row in gv.Rows)
                        {
                            row.Attributes.Add("onmouseover", "this.style.backgroundColor='#FFFF66'");
                            row.Attributes.Add("onmouseout", "this.style.backgroundColor=''");
                        }
                    }
                }
            }
            base.Render(writer);
        }

        /// <summary>
        /// 在页面中输出信息
        /// </summary>
        /// <param name="title"></param>
        /// <param name="msg"></param>
        /// <param name="responseEnd"></param>
        protected void WritePageInfo(string title, string msg, bool responseEnd)
        {
            string html = GetPageInfo(title, msg);
            Response.Write(html);
            if (responseEnd)
            {
                Response.End();
            }
        }
        /// <summary>
        /// 获取页面信息
        /// </summary>
        /// <param name="title"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        protected string GetPageInfo(string title, string msg)
        {
            string html = "<div style='width:100%;'><div style='text-align:center;border:solid 1px #6699BB;background-color:#D5E2ED;width:600px;margin: 50px auto;padding:50px 10px;'><h2>{0}</h2><div>{1}</div></div></div>";
            return string.Format(html, title, msg);
        }
        #endregion

        #region 取得当前网站的路径
        public string GetAppPath()
        {
            string path = "http://" + HttpContext.Current.Request.ServerVariables["Http_Host"] + HttpContext.Current.Request.ApplicationPath;
            if (path.LastIndexOf('/') == path.Length - 1)
                return path;
            else
                return path + "/";
        }
        #endregion

        #region 获取客户端可访问的url
        public string GetClientUrl(string url)
        {
            return entCMS.Common.WebUtil.GetClientUrl(this, url);
        } 
        #endregion

        #region 获取用户信息
        /// <summary>
        /// 判断是否是超级管理员
        /// </summary>
        /// <returns></returns>
        public bool IsAdmin
        {
            get
            {
                bool m = false;
                if (LoginUser.UserType.HasValue && LoginUser.UserType.Value == 1)
                {
                    m = true;
                }
                return m;
            }
        }

        #endregion

        #region 权限相关
        /// <summary>
        /// 
        /// </summary>
        protected List<cmsUserPurview> Purviews
        {
            get
            {
                if (Session["Purviews"] != null)
                {
                    return (List<cmsUserPurview>)Session["Purviews"];
                }
                return null;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        protected bool ValidUserPurview()
        {
            if (PurviewType == PagePurviewType.PPT_UNKNOWN) return true;

            if (IsAdmin) return true;

            int type = (int)_purviewType - 1;

            bool ret = true;

            if (Purviews == null)
            {
                ret = false;
            }
            else
            {
                ret = PurviewExists(NodeCode, type);
            }
            return ret;
        }
        /// <summary>
        /// 判断权限是否存在
        /// </summary>
        /// <param name="code"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public bool PurviewExists(string code, int type)
        {
            return Purviews.Exists(x => x.NodeCode == code && x.Type == type);
        }
        #endregion

        #region 按钮事件
        protected virtual void btnAdd_Click(object sender, EventArgs e) { }
        protected virtual void btnEdit_Click(object sender, EventArgs e) { }
        protected virtual void btnSave_Click(object sender, EventArgs e) { }
        #endregion
    }
}